@page "/builder/log/{id:int}"
@using System.Timers
@using FOPS.Application.Build.Build
@using FOPS.Application.Build.Build.Entity
@using FOPS.Application.Build.Project
@using FOPS.Application.Build.Project.Entity
@using FOPS.Domain.Build.Deploy.Device
@using FOPS.Domain.Build.Enum
@using System.Text.RegularExpressions

@inject NavigationManager Nav;
@inject IJSRuntime Js;
@inject ILogWriteDevice LogWriteDevice;
@inject ProjectApp ProjectApp;
@inject BuildApp BuildApp;
@implements IDisposable;

<div class="layui-card">
    <div class="layui-card-header">
        @_info.Id -【@_projectInfo.Name（@_info.BuildNumber）】的构建日志
        @{
            switch (_info.Status)
            {
                case EumBuildStatus.None:
                    <button class="layui-btn layui-btn-xs layui-btn-primary">未开始</button>
                    break;
                case EumBuildStatus.Building:
                    <button class="layui-btn layui-btn-xs layui-btn-normal">构建中</button>
                    break;
                case EumBuildStatus.Finish:
                    if (_info.IsSuccess)
                    {
                        <button class="layui-btn layui-btn-xs">成功</button>
                    }
                    else
                    {
                        <button class="layui-btn layui-btn-xs layui-btn-danger">失败</button>
                    }
                    break;
            }
        }
        <div class="layui-right">
            @if (_info.Status != EumBuildStatus.Building)
            {
                <button class="layui-btn layui-btn-danger" @onclick="AddBuild">构建</button>
            }
            <button class="layui-btn" @onclick="GotoList"><i class="am-icon-plus"></i> 列表</button>
        </div>
    </div>
    <div class="layui-card-body" style="background-color:#393d49;line-height: 26px">
        <div class="layui-form-item">
            @* <pre class="layui-code layui-box layui-code-view" id="preLog"> *@
            @* <h3 class="layui-code-h3">code<a href="javasciprt:;">执行日志</a></h3> *@
            <ol class="layui-code-ol" style="color: #fff;">
                @for (var index = 0; index < _lstLog.Length; index++)
                {
                    <li>
                        <span style="color:#6f6c6c">@(index + 1) : </span> @SyntaxHighlighting(_lstLog[index])
                    </li>
                }
            </ol>
            @* </pre> *@
        </div>
        @{
            if (_info.Status == EumBuildStatus.Building)
            {
                <div class="layui-form-item layui-layout-admin">
                    <div class="layui-input-block">
                        <div class="layui-footer" style="left: 0;">
                            <button class="layui-btn" @onclick="CancelBuild">取消</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private BuildDTO _info = new();
    private ProjectDTO _projectInfo = new();
    private string[] _lstLog = Array.Empty<string>();
    private Timer _timer;
    private bool _isFirst;

    protected override async Task OnParametersSetAsync()
    {
        if (_isFirst) return;
        _isFirst = true;

        if (Id > 0 && _info.Id == 0)
        {
            try
            {
                _info = await BuildApp.ToInfoAsync(Id);
                if (_info == null)
                {
                    await Js.InvokeVoidAsync("layer.alert", "构建队列不存在", new
                    {
                        icon = 2,
                        title = "出错了"
                    });
                    GotoList();
                    return;
                }

                _projectInfo = await ProjectApp.ToInfoAsync(_info.ProjectId) ?? new();
                _lstLog = LogWriteDevice.View(_info.Id);
                if (_info.Status != EumBuildStatus.Finish)
                {
                    _timer = new Timer(1000);
                    _timer.Elapsed += async (sender, args) =>
                    {
                        try
                        {
                            var oldLineCount = _lstLog.Length;
                            _info = await BuildApp.ToInfoAsync(Id);
                            _lstLog = LogWriteDevice.View(_info.Id);
    // 刷新页面
                            await InvokeAsync(StateHasChanged);
    // 完成状态，则停止时间器
                            if (_info.Status == EumBuildStatus.Finish) _timer.Stop();
    // 有新内容时，滚屏到底部
                            if (oldLineCount != _lstLog.Length) await ScrollBodyTop();
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e);
                        }
                    };
                    _timer.Enabled = true;
                }
            }
            catch
            {
            }
        }
    }

    private async Task CancelBuild()
    {
        await BuildApp.Cancel(Id);
        _info = await BuildApp.ToInfoAsync(Id);
    }

    private void GotoList()
    {
        Nav.NavigateTo("/builder/list");
    }

    private ValueTask ScrollBodyTop()
    {
        try
        {
            return Js.InvokeVoidAsync("ScrollBodyTop");
        }
        catch
        {
        }
        return ValueTask.CompletedTask;
    }

    /// 构建
    private async Task AddBuild()
    {
        var load = await Js.InvokeAsync<int>("layer.load", 0, "{shade: false}");
        try
        {
            Id = await BuildApp.AddAsync(_info.ProjectId, _info.ClusterId);
            _info = await BuildApp.ToInfoAsync(Id);
            await Js.InvokeVoidAsync("layer.msg", "已加入到队列", new
            {
                icon = 1,
                title = "执行结果"
            });
        }
        catch (Exception e)
        {
            await Js.InvokeVoidAsync("layer.alert", e.Message, new
            {
                icon = 2,
                title = "加入失败"
            });
        }
        await Js.InvokeVoidAsync("layer.close", load);
        Nav.NavigateTo($"/builder/log/{Id}", true);
    }

    // 语法高亮
    static string[] chineseTips =
    {
        "环境变量：", "前置检查。", "先删除之前编译的目标文件。", "自动创建目录。", "前置检查通过。", "已经是最新的。", "拉取完成。", "登陆镜像仓库。", "登陆成功。", "开始镜像打包。", "镜像打包完成。", "开始上传镜像。", "镜像上传完成。", "开始更新K8S POD的镜像版本。", "更新镜像版本完成。"
    };
    static string[] cmdPrefix =
    {
        "git -C ",
        "docker login ",
        "docker build -t ",
        "docker push ",
        "kubectl set image ",
        "成功执行。"
    };
    static string[] cmdResultTips =
    {
        "Login Succeeded"
    };

    static string[] errorTips =
    {
        "Exception ",
        "Failed ",
        "ERROR:",
        "error ",
        "镜像打包出错了。",
        "执行失败，提前退出。",
        "K8S更新镜像失败。",
        "Unable to connect",
        "Cannot connect",
    };

    private MarkupString SyntaxHighlighting(string content)
    {
        var dateTime = content.Substring(0, 19);
        var log = content.Substring(20);
        dateTime = $"<span style=\"color:#9caf62\">{dateTime}</span>";

    // fops的中文提示（紫色）
        if (chineseTips.Contains(log)) log = $"<span style=\"color:#cfbbfc\">{log}</span>";
    // 命令中比较重要的（白色）
        else if (cmdResultTips.Contains(log) ||
                 log.StartsWith("The push refers to repository ") ||
                 Regex.IsMatch(log, "\\w+\\.apps/\\w+ image updated"))
        {
            log = $"<span style=\"color:#fff\">{log}</span>";
        }
    // fops的命令（黄色）
        else if (cmdPrefix.Any(o=>log.StartsWith(o)))
        {
            log = $"<span style=\"color:#ffe127\">{log}</span>";
        }
    // 执行错误（红色）
        else if (errorTips.Any(o=>log.ToLower().Contains(o.ToLower())))
        {
            log = $"<span style=\"color:#ff5b5b\">{log}</span>";
        }
        else
        {
            // 容器中的命令（黄色）
            var dockerLogMatch = Regex.Match(log, "#\\d+ \\[.+ \\d+/\\d+\\] (?<cmd>.+)");
            if (!dockerLogMatch.Success) dockerLogMatch = Regex.Match(log, "#\\d+ \\d+\\.\\d+ (?<cmd>.+)");
            if (dockerLogMatch.Success)
            {
                log = log.Replace(dockerLogMatch.Groups[1].Value, $"<span style=\"color:#38e4c6\">{dockerLogMatch.Groups[1].Value}</span>");
                log = $"<span style=\"color:#6a6964\">{log}</span>";
            }
            else // 其它 （灰色）
            {
                log = $"<span style=\"color:#6a6964\">{log}</span>";
            }
        }
        return new MarkupString(dateTime + " " + log);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}