@page "/git/update/{id:int}"
@using Microsoft.AspNetCore.Components
@using FOPS.Application.Build.Git
@using FOPS.Application.Build.Git.Entity
@using FOPS.Application.Build.Project
@using FOPS.Domain.Build
@using FS.Extends

@inject NavigationManager Nav;
@inject IJSRuntime Js;
@inject GitService GitService;
@inject GitApp GitApp;
@inject ProjectApp ProjectApp;

<div class="layui-card">
    <div class="layui-card-header">
        编辑GIT
        <div class="layui-right">
            <button class="layui-btn" @onclick="GotoList"><i class="am-icon-plus"></i> 列表</button>
        </div>
    </div>
    <div class="layui-card-body" style="padding: 15px;">
        <div class="layui-form-item">
            <label class="layui-form-label">ID</label>
            <div class="layui-input-inline">
                <label class="layui-form-label" style="text-align: left">@_info.Id</label>
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">Git名称</label>
            <div class="layui-input-block">
                <input type="text" @bind="_info.Name" autocomplete="off" placeholder="请输入Git名称" class="layui-input">
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">托管地址</label>
            <div class="layui-input-block">
                <input type="text" @bind="_info.Hub" autocomplete="off" placeholder="请输入托管地址" class="layui-input">
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">分支</label>
            <div class="layui-input-block">
                <input type="text" @bind="_info.Branch" autocomplete="off" placeholder="请输入分支" class="layui-input">
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">Git账户名称</label>
            <div class="layui-input-inline">
                <input type="text" @bind="_info.UserName" placeholder="请输入Git账户名称" autocomplete="off" class="layui-input">
            </div>
            <div class="layui-form-mid layui-word-aux">如没有，则留空</div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">Git账户密码</label>
            <div class="layui-input-inline">
                <input type="text" @bind="_info.UserPwd" placeholder="请输入Git账户密码" autocomplete="off" class="layui-input">
            </div>
            <div class="layui-form-mid layui-word-aux">如没有，则留空</div>
        </div>
        <div class="layui-form-item layui-layout-admin">
            <div class="layui-input-block">
                <div class="layui-footer" style="left: 0;">
                    <button class="layui-btn" @onclick="UpdateInfo">保存</button>
                    <button class="layui-btn layui-btn-danger" @onclick="Delete">删除</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code{

    [Parameter] public int Id { get; set; }

    private GitDTO _info = new() {};

    private async Task UpdateInfo()
    {
        if (Id < 1 || _info == null)
        {
            await Js.InvokeVoidAsync("layer.alert", "Git仓库不存在", new {icon = 2, title = "出错了"});
            GotoList();
            return;
        }
        try
        {
            
            if (string.IsNullOrWhiteSpace(_info.Name) || string.IsNullOrWhiteSpace(_info.Hub) || string.IsNullOrWhiteSpace(_info.Branch))
            {
                throw new Exception("Git名称、托管地址、分支必须填写。");
            }
            
            await GitApp.UpdateAsync(_info);
            await Js.InvokeVoidAsync("layer.msg", "修改成功", new {icon = 1});
            GotoList();
        }
        catch (Exception e)
        {
            await Js.InvokeVoidAsync("layer.alert", e.Message, new {icon = 2, title = "出错了"});
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Id < 1 || _info == null)
        {
            await Js.InvokeVoidAsync("layer.alert", "Git仓库不存在", new {icon = 2, title = "出错了"});
            GotoList();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0 && _info.Id == 0)
        {
            _info = await GitApp.ToInfoAsync(Id);
            if (_info == null)
            {
                await Js.InvokeVoidAsync("layer.alert", "Git仓库不存在", new {icon = 2, title = "出错了"});
                GotoList();
            }
        }
    }

    private void GotoList()
    {
        Nav.NavigateTo("/git/list");
    }

    private async Task Delete()
    {
        var count = await ProjectApp.GitCountAsync(Id);
        if (count > 0)
        {
            await Js.InvokeVoidAsync("layer.alert", $"删除Git前，需先删除Git的{count}个项目", new
            {
                icon = 2,
                title = "出错了"
            });
            Nav.NavigateTo("/project/list");
            return;
        }
        
        var lstLog = new List<string>();
        var progress = new Progress<string>(log =>
        {
            lstLog.Add(log);
        });
        
        var execSuccess = await GitService.ClearAsync(Id,progress);
        if (!execSuccess)
        {
            await Js.InvokeVoidAsync("layer.alert", lstLog.ToString("<br />"), new {icon = 2, title = "清除失败"});
            return;
        }
        
        await GitApp.DeleteAsync(Id);
        GotoList();
    }

}